#ifndef ASYNC_HTTP_H
#define ASYNC_HTTP_H

#include <ArduinoJson.h>
#include <functional>

#if defined(ESP8266)
    #include <ESPAsyncTCP.h>
    #include <ESP8266WiFi.h>
#elif defined(ESP32)
    #include <AsyncTCP.h>
    #include <WiFi.h>
#endif

class AsyncHTTP
{
   public:
    AsyncHTTP();
    ~AsyncHTTP();

    unsigned long send2http(const char *auth, const char *host, int port, const char *query);
    unsigned long send2http_url(const char *char_url);

    void handleData(AsyncClient *c, unsigned long sendID, void *data, size_t len);
    void onData_cb(std::function<void(unsigned long, const char *)> callback);
    void onData_cb_json(std::function<void(unsigned long, JsonDocument &doc)> callback);

   private:
    //AsyncClient  *aClient = nullptr;
    static AsyncClient * aClient = NULL;
    
    unsigned long sentID  = 0;

    // Global variables to persist parameters
    char global_auth[24]  = {0};
    char global_host[48]  = {0};
    int  global_port      = 0;
    char global_query[256] = {0};

    char request[512] = {0};

    static void clientError(void *arg, AsyncClient *client, err_t error);
    static void clientDisconnect(void *arg, AsyncClient *client);
    static void clientData(void *arg, AsyncClient *client, void *data, size_t len);
    static void clientConnect(void *arg, AsyncClient *client);

    unsigned long sendRequest(const char *host, int port, const char *request);
    void          handleRequestCleanup(AsyncClient *client);
    void          clearGlobalVariables();

    std::function<void(unsigned long, const char *)>      onData_cb_;
    std::function<void(unsigned long, JsonDocument &doc)> onData_cb_json_;
};

#endif // ASYNC_HTTP_H
